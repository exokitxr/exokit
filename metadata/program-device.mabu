#
# Example program project.
#
# Settings are presented in the order of likelihood in real projects.
# Only the ones marked (required) are needed for useful projects.
#

# This tells the kind of build output, controlling the naming of the output
# file and the link steps (required)
#
KIND = program

# The guts of a project are its source files (required)
#
# mabu determines the source type by the file extension
# and invokes the C/C++ compiler or assembler as appropriate.
#
SRCS = ../main.cpp

# Include paths for any language are specified here.
#
INCS = ../.node-gyp/10.9.0/include/node \
  ../node_modules/nan

# Macro definitions for any language are specified here.
#
DEFS = LUMIN \
  NOMINMAX

# Specify build options -- these are generic ways to specify flags
# that are common between toolchains but not always textually
# compatible.  Use 'mabu --print-options' to see the ones available.
#
OPTIONS = standard-c++/17 stl/libc++_static debug/on package/debuggable/on

# Specify link references to other mabu projects, meaning mabu builds them
# first, then links against their outputs.  Additionally, if
# any settings are "export"'ed from those projects, they are combined
# with this project.
#
# This resolves to 'shared.mabu' and 'static.mabu'.
#
# REFS = shared static

# References needn't be in the same directory as this project.
#
# This resolves to 'path/to/shared.mabu' and 'other/path/to/static.mabu'
#
# REFS = path/to/shared other/path/to/static

# Projects may use existing prebuilt components.  Unlike REFS,
# they aren't built first, and all settings in them are merged with users.
#
# Components are mainly used by ML SDK, but may also be used for your
# existing built code.  See *.comp files for examples.
# Use 'mabu --print-components' to see the ones available.
#
USES = ml_sdk OpenGL stdc++

# Programs may publish data or assets to whatever package
# REFS this one.
#
# Files are denoted as <path> to copy a path relative to this
# project into the same path in the package,
# or, as <source> ':' <target> to copy a path relative to this
# project into a different path in the package (and access
# at runtime).
#
# The lone <path> or the <target> tells how to access the file at runtime.
#
# The <source> may include wildcards or point to a directory.
#
# Wildcards support "*", "?", and "[...]" as in "glob".
# An entry "**" may be included to recursively search for matches inside directories.
#
# When using wildcard sources, the prefix of the source that does not contain
# wildcards is stripped out when constructing the full <target> path.
# E.g. "root/above/**/*.png" does not append "root/above/" to the target paths.
#
# When using directory sources, the entire <source> path is omitted from
# the full <target> path.  E.g. "/path/to/files/ : data/" does not append
# "/path/to/files/" to the target paths.
#
# The <target> must end in a slash when paired with wildcard or directory
# sources, and cannot include wildcards.
#
DATAS = ../package.json : / \
  ../src/ : /src/ \
  ../lib/ : /lib/ \
  ../build/Release/exokit.node : /build/Release/exokit.node \
  ../node_modules/ : /node_modules/ \
  ../examples/ : /examples/ \

# If you need to perform pre-build or post-build steps,
# write Makefile snippets using double-colon rules in
# the form:
#
# prebuild::     or  <myproject>-prebuild::
# postbuild::    or  <myproject>-postbuild::
# clean::
#
# The "myproject" rules (where "myproject" is the base name
# of the *.mabu file) are invoked tightly around the build of
# the (sub-)project, while the other versions are invoked
# around the entire build process.
#
# EXTENSIONS = extensions/my_prebuild.mk extensions/my_postbuild.mk

# If you need to convert files to C/C++/assembly (or other formats)
# during the build, write Makefile snippets to do the conversion,
# and spell out the extension and path mapping here, so
# mabu will integrate those steps into the incremental build.
#
# SRC_EXTENSIONS = extensions/my_flex_converter.mk : %.l -> generated/%.c \
#                  extensions/my_bison_converter.mk : %.y -> generated/%.c
#                  my_bat_to_sh_converter.mk : %.bat -> %.sh

# You may change the output directory for projects
# this way (rather than passing -o|--out on the command line).
#
# Note that the build output will always appear in
# a subdirectory of this one, named after the build target.
#
OUT = ../build/magicleap/program-device

# You may rename the output program this way (rather than
# by renaming your *.mabu file).
#
# The name should not include any OS-specific prefix or
# suffix.  Here, `myprogram` maps to `myprogram` or `myprogram.exe`
# depending on the target.
#
# OUTNAME = myprogram

#
# Other allowed variables -- not recommended for use in *.mabu projects
# directly (they are better for configurations or options),
# but allowed.
#

# NOTE: most of these examples include specializations because they are
# nonportable, which is why DEFS, INCS, OPTIONS and USES/components should
# be your first choice.  (See specialization.mabu for more details.)

# object files to link in
#
# OBJS.win = path/to/file.obj path/to/another.obj
# OBJS.linux_x64 = path/to/file_x64.o

# static libs to link in
#
STLIBS = node \
  exokit \
  skia \
  LabSound \
  avformat \
  avcodec \
  avutil \
  avdevice \
  swscale \
  swresample \
  opus

# shared libs to link in
#
# SHLIBS.win = ole32 winmm
SHLIBS = ml_privileges \
  ml_camera \
  ml_audio

# paths for finding libraries above
#
LIBPATHS = $(MLSDK)/lumin/stl/libc++/lib \
  $(MLSDK)/lumin/usr/lib \
  $(MLSDK)/lib/lumin \
  ../build/libexokit \
  ../node_modules/libnode.a \
  ../node_modules/native-canvas-deps\lib2\magicleap \
  ../node_modules/native-audio-deps\lib2\magicleap \
  ../node_modules/native-video-deps\lib2\magicleap

# flags for C/C++/assembly preprocessing
#
# CPPFLAGS = -Dspecial -Ubad_macro

# flags for C or C++ compilers
#
CFLAGS.gcc,clang = -ffast-math

# flags for C++ compilers
#
CXXFLAGS.gcc,clang = -fvisibility-ms-compat
CXXFLAGS.msvc = /MT /std:c++latest

# flags for assemblers
#
ASMFLAGS.gcc,clang = -march=x64+sse+sse2+sse3 -mtune=k8
ASMFLAGS.msvc = -Zp8

# flags for linking: note these go to gcc, not "ld", for
# gcc/clang tools, so use -Wl,... if needed.
#
LDFLAGS.gcc,clang = -Wl,-v -Wl,-E
LDFLAGS.win = -subsystem:console
